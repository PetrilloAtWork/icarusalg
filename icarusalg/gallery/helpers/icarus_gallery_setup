#
# File:    icarus_gallery_setup
# Purpose: setup for use of gallery macros with ICARUS
# Author:  Gianluca Petrillo (petrillo@slac.stanford.edu)
# Date:    October 19, 2017
# Version: 1.1
# 
# Usage:
# To set up the gallery/larsoftobj version compatible with a specific experiment
# code version (e.g. v09_06_00 with qualifiers e19:prof):
#     
#     setup icarusalg v09_06_00 -q e19:prof # or any suitable version
#     source icarus_gallery_setup
#     
# or let icarusalg setup happen inside this setup script:
#     
#     source icarus_gallery_setup v09_06_00 e19:prof
#     
#
# Changes:
# 20201016 [v1.1] (petrillo@slac.stanford.edu)
#   version updates and using icarusalg instead of icaruscode;
#   added UPS check
# 20171019 [v1.0] (petrillo@fnal.gov)
#   original version from SBND
#

#
# The script is quite complicate because it needs to figure out which version
# of larsoftobj is required, which is not trivial.
# In addition, it needs some version of `cmake` from UPS.
#

function ICARUSgallerySetup_CheckUPS() {
  which ups &> /dev/null
} # ICARUSgallerySetup_CheckUPS()


function ICARUSgallerySetup_setupUPS() {
  # bootstrap setup for UPS (+ experiment environment)
  local ExpName="$1"
  
  ICARUSgallerySetup_CheckUPS
  local res=$?
  
  case "$res" in
    ( 0 ) return 0 ;;
    ( 1 )
      # no UPS found; attempt to set it up, then try again
      
      # trying to guess which is the setup script...
      local expname="${ExpName,,}"
      local -a ExptSetupScriptCandidates=(
        "/cvmfs/${expname}.opensciencegrid.org/products/setup_${expname}.sh"
        "/cvmfs/${expname}.opensciencegrid.org/products/${expname}/setup_${expname}.sh"
        "" # fallback for failure
      )
      local ExptSetupScriptCandidate
      for ExptSetupScriptCandidate in "${ExptSetupScriptCandidates[@]}" ; do
        [[ -r "$ExptSetupScriptCandidate" ]] && break
      done
      if [[ -z "$ExptSetupScriptCandidate" ]]; then
        echo "ERROR: could not guess ${ExpName} setup script path: you need to source it!" >&2
        return 1
      fi
      echo "Setting up ${ExpName} environment for you ('${ExptSetupScriptCandidate}')"
      source "$ExptSetupScriptCandidate"
      res=$?
      if [[ $res != 0 ]]; then
        echo "WARNING: ${ExpName} setup script '${ExptSetupScriptCandidate}' execution failed (code: ${res})." >&2
      fi
      # repeat the check
      ICARUSgallerySetup_CheckUPS
      res=$?
      ;;
  esac
  
  [[ "$res" != 0 ]] && echo "ERROR (${res}): UPS not set up (you may need to run the experiment setup script)." >&2
  return $res
  
} # ICARUSgallerySetup_setupUPS()


function ICARUSgallerySetup_upssetup() {
  # rather than relying on `setup` from UPS, which might not be exported,
  # we use our own
  
  local -a SetupArgs=( "$@" )
  
  echo "setup ${SetupArgs[@]}"
  
  # we might check if `setup()` is actually defined... we end up not bothering
  local TempScript
  TempScript="$(ups setup "${SetupArgs[@]}")"
  local res=$?
  if [[ $res == 0 ]]; then
    source "$TempScript"
    res=$?
  fi
  [[ -w "$TempScript" ]] && rm -f "$TempScript"
  return $res
} # ICARUSgallerySetup_upssetup()


function ICARUSgallerySetup_MatchProductQualifiers() {
  local ProdVersion="$1"
  local -a ProdQualifierSpec="$2"
  local -a ProdQualifiers=( $(tr ': ' '\n' <<< "$ProdQualifierSpec" | sort -u ) )
  
  local -i iSrcQual=0
  local KeyQual
  for KeyQual in "${RequiredQualifiers[@]}" ; do
    while [[ $iSrcQual -lt ${#ProdQualifiers[@]} ]]; do
      [[ "$KeyQual" == "${ProdQualifiers[iSrcQual++]}" ]] && continue 2 # match! go to next required qualifier
    done
    return 1 # no qualifier match, this product is not good
  done
#   echo "${Product} ${ProdVersion} ${ProdQualifierSpec}"
  return 0
} # ICARUSgallerySetup_MatchProductQualifiers()


function ICARUSgallerySetup_setupLatest() {
  # looks for what it seems to be the highest version
  # (with required qualifiers if any) and sets it up

  local -i NoMoreOptions=0
  local -a RequiredQualifiers
  local Product
  local Param iParam
  for (( iParam = 1 ; iParam <= $# ; ++iParam )); do
    Param="${!iParam}"
    if [[ -n "${NoMoreOptions//0}" ]] || [[ "${Param:0:1}" != '-' ]]; then
      if [[ -z "$Product" ]]; then
        Product="$Param"
      else
        RequiredQualifiers+=( ${Param//:/ } )
      fi
    else
      case "$Param" in
        ( '--qual' | '-q' ) let ++iParam ; RequiredQualifiers+=( ${!iParam//:/ } ) ;;
        ( '-' | '--' )      NoMoreOptions=1 ;;
        ( * )
          echo "Internal error in ${FUNCNAME}: unsupported option '${Param}'."
          return 1
      esac
    fi
  done

  RequiredQualifiers=( $(tr ': ' '\n' <<< "${RequiredQualifiers[*]}" | sort -u ) )
  local -i nRequiredQualifiers="${#RequiredQualifiers[@]}"
  
  local ProdVersion='' ProdQualifiers=''
  
  local -a AvailableProducts=( $( ups list -a -K VERSION:QUALIFIERS "$Product" | tr -d '"' | sort -r -V -u ) )
  local CandidateVerQual
  for CandidateVerQual in "${AvailableProducts[@]}" ; do
    local CandidateProdVersion CandidateProdQualifiers
    read CandidateProdVersion CandidateProdQualifiers <<< "${CandidateVerQual/:/ }"
    ICARUSgallerySetup_MatchProductQualifiers "$CandidateProdVersion" "$CandidateProdQualifiers" || continue
    ProdVersion="$CandidateProdVersion"
    ProdQualifiers="$CandidateProdQualifiers"
    break
  done
  if [[ -z "$ProdVersion" ]]; then
    echo "Error: no product '${Product}' found${RequiredQualifiers:+" compatible with all qualifiers '${RequiredQualifiers}'"}" >&2
    return $res
  fi
  
  ICARUSgallerySetup_upssetup "$Product" "$ProdVersion" ${ProdQualifiers:+ -q "$ProdQualifiers"}

} # ICARUSgallerySetup_setupLatest()


function DoICARUSgallerySetup() {
  
  ##############################################################################
  ### Experiment-specific setup
  local -r ExpName='ICARUS'
  local -r ExpCode='icarusalg'
  
  ##############################################################################
  ### LArSoft-specific setup
  ### 
  local -r ReferencePkgs=( 'larcorealg' 'lardataobj' )
  local -r TargetPkg='larsoftobj'
  
  ##############################################################################
  ### Argument parsing
  ### 
  local ExpCodeVersion="$1"
  local Qualifiers="$2"
  
  ##############################################################################
  ### Environment preliminary check
  ### 
  ICARUSgallerySetup_setupUPS "$ExpName" || return $?
  
  ##############################################################################
  ### Main setup script
  ### 
  # reference package names need to be lexicographically sorted
  local -r SortedReferencePkgs=( $(tr ' ' '\n' <<< "${ReferencePkgs[@]}" | sort -u | grep -v '^$' ) )
  local -ir nReferencePkgs="${#ReferencePkgs[@]}"
  
  local PkgName PkgVersion PkgFlavor PkgQualifiers PkgDatabase Dummy
  local StrictQualifiers
  
  #
  # experiment code package setup
  #
  local -r ExpSetupVarName="SETUP_${ExpCode^^}"
  if [[ -n "${!ExpSetupVarName}" ]]; then
    #
    # if we have experiment code set up, check that the version is not unexpected
    #
    # expecting (UPS 6.0.8):
    # icarusalg v09_06_00 -f Linux64bit+3.10-2.17 -q e19:prof -z /cvmfs/icarus.opensciencegrid.org/products/icarus
    read PkgName PkgVersion Dummy PkgFlavor Dummy PkgDatabase Dummy PkgQualifiers <<< "${!ExpSetupVarName}"
    echo "${ExpName} code version: ${PkgName} ${PkgVersion} -q ${PkgQualifiers}"
    
    if [[ -n "$ExpCodeVersion" ]]; then 
      
      if [[ "$ExpCodeVersion" != "$PkgVersion" ]]; then
        echo "ERROR: ${ExpCode} ${PkgVersion} already set up, can't set up version ${ExpCodeVersion} now." >&2
        return 1
      fi
      if [[ -n "$Qualifiers" ]]; then
        StrictQualifiers="+${Qualifiers//:/:+}"
        
        # doing this again will ensure that the qualifiers are the same
        ICARUSgallerySetup_upssetup -B "$ExpCode" "$ExpCodeVersion" -q "$StrictQualifiers" || return $?
        
      else
        Qualifiers="$PkgQualifiers"
        StrictQualifiers="+${Qualifiers//:/+:}"
      fi
    fi
  elif [[ -n "$MRB_QUALS" ]]; then
    local -r ExpVersionVarName="$(tr [a-z] [A-Z] <<< "$ExpCode" )_VERSION"
    if [[ -z "${!ExpVersionVarName}" ]]; then
      cat <<EOM >&2
To set up gallery environment, you either need:
a) ${ExpCode} already set up (it's not), or
b) to specify the ${ExpCode} version and qualifiers (you didn't);
   for example: source ${BASH_SOURCE[0]} v09_06_00 e19:prof
c) to have a MRB area set up (which you have) with ${ExpCode} checked out and with \`mrbsetenv\` run (which you don't)
EOM
      return 1
    fi
    
    ExpCodeVersion="${!ExpVersionVarName}"
    Qualifiers="$MRB_QUALS"
    StrictQualifiers="+${Qualifiers//:/:+}"
    echo "${ExpName} code version: ${ExpCode} ${ExpCodeVersion} -q ${Qualifiers} in MRB development area"
    
  else
    #
    # if we don't have experiment code package set up, it's that time now, but we need to know which version
    #
    
    if [[ -z "$ExpCodeVersion" ]] || [[ -z "$Qualifiers" ]]; then
      cat <<EOM >&2
To set up gallery environment, you either need:
a) ${ExpCode} already set up (it's not), or
b) to specify the ${ExpCode} version and qualifiers (you didn't);
   for example: source ${BASH_SOURCE[0]} v06_53_00 e14:prof
c) to have a MRB area set up (which you don't have) with ${ExpCode} checked out (and with \`mrbsetenv\` run)
EOM
      return 1
    fi
    
    StrictQualifiers="+${Qualifiers//:/:+}"
    ICARUSgallerySetup_upssetup -B "$ExpCode" "$ExpCodeVersion" -q "$StrictQualifiers" || return $?
    
  fi
  
  #
  # which reference package versions do we depend on?
  #
  local -a ReferencePkgVersions
  local -a ReferencePkgQualifiers
  for ReferencePkg in "${SortedReferencePkgs[@]}" ; do
    local ReferencePkgSetupVarName="SETUP_$(tr [a-z] [A-Z] <<< "$ReferencePkg")"
    if [[ -z "${!ReferencePkgSetupVarName}" ]]; then
      echo "ERROR: configuration mess! the reference UPS product ${ReferencePkg} is not set up (or at least, there is no '${ReferencePkgSetupVarName}' variable in the environment)." >&2
      return 1
    fi
    
    # expecting (UPS 5.2.0):
    # canvas v3_00_02 -f Linux64bit+2.6-2.12 -q e14:nu:prof -z /grid/fermiapp/products/larsoft
    read PkgName PkgVersion Dummy PkgFlavor Dummy PkgDatabase Dummy PkgQualifiers <<< "${!ReferencePkgSetupVarName}"
    ReferencePkgVersions+=( "$PkgVersion" )
    ReferencePkgQualifiers+=( "$PkgQualifiers" )
    # echo "Requiring ${ReferencePkg} version: ${PkgName} ${PkgVersion} -q ${PkgQualifiers}"
  done
  
  #
  # which target package depends from the reference package we have set up?
  #
  # expecting (UPS 5.2.0):
  # "larsoftobj" "v1_29_00" "Darwin64bit+16" "debug:e14" ""
  local TargetPkgVersion=""
  local TargetPkgQualifiers=""
  
  local -i iReference
  while read PkgName PkgVersion PkgFlavor PkgQualifiers Dummy ; do
    local StrictPkgQualifiers="+${PkgQualifiers//:/:+}"
    # echo "Testing ${TargetPkg} ${PkgVersion} -q ${StrictPkgQualifiers}"
    
    # to speed up the N^2 search, we have sorted the dependencies
    iReference=0
    
    local DepName DepVersion DepQuals
    while read DepName DepVersion DepQuals ; do
      
      # is this the dependency we are looking for now? (if not, check the next dependency of this target version)
      DepName="${DepName//\"/}"
      [[ "$DepName" == "${SortedReferencePkgs[iReference]}" ]] || continue
      
      # echo "Comparing dependency ${DepName} ${DepVersion} ${DepQuals} with the required ${ReferencePkgVersions[iReference]} ${ReferencePkgQualifiers[iReference]}"
      
      # is this the desired version? (if not, the target version is wrong)
      DepVersion="${DepVersion//\"/}"
      [[ "$DepVersion" == "${ReferencePkgVersions[iReference]}" ]] || continue 2
      
      # has this the desired qualifiers? (if not, the target version is wrong)
      DepQuals="${DepQuals//\"/}"
      [[ "$DepQuals" == "${ReferencePkgQualifiers[iReference]}" ]] || continue 2
      
      # echo " => ${TargetPkg} ${PkgVersion} -q ${StrictPkgQualifiers} has the required ${DepName} (${DepVersion} ${DepQuals})"
      
      # this dependency is fulfilled; let's go to the next
      let ++iReference
      [[ $iReference -ge $nReferencePkgs ]] && break
      
    done < <(ups depend -K 'PRODUCT:VERSION:QUALIFIERS' "$TargetPkg" "$PkgVersion" -q "$PkgQualifiers" | sort)
    
    # have we found all the dependencies we were looking for? (if not, the target version is wrong)
    [[ $iReference -ge $nReferencePkgs ]] || continue
    
    TargetPkgVersion="$PkgVersion"
    TargetPkgQualifiers="$PkgQualifiers"
    break
    
  done < <(ups list -aK+ "$TargetPkg" | sort -r -k 2 | tr -d '"')
  
  if [[ -z "$TargetPkgVersion" ]]; then
    echo "ERROR: can't find the ${TargetPkg} version depending on the reference products:"
    for (( iReference = 0 ; iReference < $nReferencePkgs ; ++iReference )); do
      echo " * ${ReferencePkgs[iReference]} ${ReferencePkgVersions[iReference]} (qualifiers '${ReferencePkgQualifiers[iReference]}')" >&2
    done
    return 1
  fi
  
  local StrictTargetPkgQualifiers="+${TargetPkgQualifiers//:/:+}"
  ICARUSgallerySetup_upssetup -B "$TargetPkg" "$TargetPkgVersion" -q "$StrictTargetPkgQualifiers" || return $?
  
  # set up cmake only if not yet there
  [[ -z "$SETUP_CMAKE" ]] && ICARUSgallerySetup_setupLatest cmake
  
  unset DoICARUSgallerySetup
} # DoICARUSgallerySetup()


function ICARUSgallerySetupWrapper() {
  DoICARUSgallerySetup "$@"
  local res=$?
  unset ICARUSgallerySetup_CheckUPS ICARUSgallerySetup_setupUPS ICARUSgallerySetup_upssetup ICARUSgallerySetup_setupLatest ICARUSgallerySetup_MatchProductQualifiers
  unset DoICARUSgallerySetup ICARUSgallerySetupWrapper
  return $res
} # ICARUSgallerySetupWrapper


ICARUSgallerySetupWrapper "$@"

